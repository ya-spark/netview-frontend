openapi: 3.0.3
info:
  title: NetView - Multi-Tenant SaaS Monitoring Platform API
  description: |
    RESTful API for NetView, a comprehensive multi-tenant monitoring platform for website, API, security, and browser monitoring.
    
    ## Authentication Methods
    
    ### 1. Firebase JWT Token
    - Header: `Authorization: Bearer <firebase-id-token>`
    - Used for user session authentication
    - Verified via Firebase Admin SDK
    
    ### 2. API Keys
    - Header: `Authorization: Bearer <api-key>` or `X-API-Key: <api-key>`
    - Format: `nv_<64-char-hex-string>`
    - Scope-based permissions
    
    ## Role Hierarchy
    - **SuperAdmin**: Full system access across all tenants
    - **Owner**: Full access within their tenant
    - **Admin**: Manage resources within tenant (cannot manage billing)
    - **Editor**: Create/edit probes and configurations
    - **Helpdesk**: Read-only access with ticket management
    - **Viewer**: Read-only access
    
  version: 1.0.0
  contact:
    name: NetView API Support
    email: contact@yaseenmd.com

servers:
  - url: https://api.netview.com
    description: Production server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Authentication
    description: User registration and authentication
  - name: Dashboard
    description: Dashboard statistics and analytics
  - name: Probes
    description: Monitoring probe management
  - name: Gateways
    description: Gateway management for distributed monitoring
  - name: Gateway API
    description: API endpoints for gateway probe execution
  - name: Probe Results
    description: Probe execution results
  - name: Notification Groups
    description: Notification group management
  - name: Alerts
    description: Alert management
  - name: Billing
    description: Stripe billing and subscription management
  - name: API Keys
    description: API key management
  - name: Users
    description: User management
  - name: Tenants
    description: Tenant/organization management
  - name: Collaborators
    description: Team member management
  - name: Admin
    description: Administrative endpoints (SuperAdmin only)
  - name: Pricing
    description: Pricing plans

components:
  securitySchemes:
    FirebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Firebase ID token
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for programmatic access
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firebaseUid:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        company:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        role:
          type: string
          enum: [SuperAdmin, Owner, Admin, Editor, Helpdesk, Viewer]
        tenantId:
          type: string
          format: uuid
          nullable: true
        isActive:
          type: boolean
        isRestrictedCountryUser:
          type: boolean
        stripeCustomerId:
          type: string
          nullable: true
        stripeSubscriptionId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        subdomain:
          type: string
          nullable: true
        billingTier:
          type: string
          enum: [Free, Paid, Enterprise]
        creditsLimit:
          type: integer
        creditsUsed:
          type: integer
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Probe:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        category:
          type: string
          enum: [Uptime, API, Security, Browser]
        type:
          type: string
          enum: [ICMP/Ping, HTTP/HTTPS, DNS Resolution, SSL/TLS, Authentication]
        configuration:
          type: object
          description: Type-specific configuration (varies by probe type)
        checkInterval:
          type: integer
          description: Check interval in seconds
          default: 300
        isActive:
          type: boolean
        createdBy:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    ProbeConfiguration:
      oneOf:
        - $ref: '#/components/schemas/ICMPPingConfig'
        - $ref: '#/components/schemas/HTTPHTTPSConfig'
        - $ref: '#/components/schemas/DNSResolutionConfig'
        - $ref: '#/components/schemas/SSLTLSConfig'
        - $ref: '#/components/schemas/AuthenticationConfig'
    
    ICMPPingConfig:
      type: object
      required: [host, timeout, packet_count]
      properties:
        host:
          type: string
          description: Target host/IP address
        timeout:
          type: integer
          description: Timeout in seconds
        packet_count:
          type: integer
          description: Number of packets to send
    
    HTTPHTTPSConfig:
      type: object
      required: [url, method, expected_status_codes]
      properties:
        url:
          type: string
          format: uri
        method:
          type: string
          enum: [GET, POST, PUT, DELETE, PATCH, HEAD]
        headers:
          type: object
          additionalProperties:
            type: string
        body:
          type: string
          nullable: true
        expected_status_codes:
          type: array
          items:
            type: integer
        timeout:
          type: integer
          description: Request timeout in seconds
    
    DNSResolutionConfig:
      type: object
      required: [domain, record_type]
      properties:
        domain:
          type: string
        record_type:
          type: string
          enum: [A, AAAA, CNAME, MX, NS, TXT, SOA]
        expected_records:
          type: array
          items:
            type: string
    
    SSLTLSConfig:
      type: object
      required: [host, port]
      properties:
        host:
          type: string
        port:
          type: integer
        check_expiry:
          type: boolean
        days_before_expiry_warning:
          type: integer
    
    AuthenticationConfig:
      type: object
      required: [url, method, credentials]
      properties:
        url:
          type: string
          format: uri
        method:
          type: string
          enum: [GET, POST]
        credentials:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
            token:
              type: string
        auth_type:
          type: string
          enum: [basic, bearer, api_key, oauth2]
    
    Gateway:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [Core, Custom]
        tenantId:
          type: string
          format: uuid
          nullable: true
        ipAddress:
          type: string
          nullable: true
        location:
          type: string
        isOnline:
          type: boolean
        lastHeartbeat:
          type: string
          format: date-time
          nullable: true
        apiKey:
          type: string
          nullable: true
          description: Only returned on creation
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    ProbeResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        probeId:
          type: string
          format: uuid
        gatewayId:
          type: string
          format: uuid
        status:
          type: string
          enum: [Success, Failure, Warning]
        resultData:
          type: object
          description: Type-specific monitoring data
        checkedAt:
          type: string
          format: date-time
    
    NotificationGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        emails:
          type: array
          items:
            type: string
            format: email
        smsNumbers:
          type: array
          items:
            type: string
        webhookUrl:
          type: string
          format: uri
          nullable: true
        alertThreshold:
          type: integer
          description: Number of failures before alert
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Alert:
      type: object
      properties:
        id:
          type: string
          format: uuid
        probeId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        type:
          type: string
          enum: [Down, Slow, Error]
        message:
          type: string
        isResolved:
          type: boolean
        resolvedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
    
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        keyPrefix:
          type: string
          description: First 8 characters for display
        scopes:
          type: array
          items:
            type: string
        lastUsed:
          type: string
          format: date-time
          nullable: true
        usageCount:
          type: integer
        isActive:
          type: boolean
        expiresAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        key:
          type: string
          description: Full API key (only returned on creation)
    
    PricingPlan:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
        stripePriceId:
          type: string
          nullable: true
        credits:
          type: integer
        features:
          type: array
          items:
            type: string
    
    DashboardStats:
      type: object
      properties:
        totalProbes:
          type: integer
        activeProbes:
          type: integer
        totalAlerts:
          type: integer
        unresolvedAlerts:
          type: integer
        totalGateways:
          type: integer
        onlineGateways:
          type: integer
    
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
          nullable: true
        details:
          type: object
          nullable: true
    
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        timestamp:
          type: string
          format: date-time

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: |
        Register a new user with Firebase token. Email and UID are extracted from the verified token.
        Auto-creates tenant for non-SuperAdmin users. Default SuperAdmins: Yaseen.gem@gmail.com, Asia.Yaseentech@gmail.com, contact@yaseenmd.com
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 100
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 100
                company:
                  type: string
                  maxLength: 255
                region:
                  type: string
                  maxLength: 100
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current authenticated user
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/pricing-plans:
    get:
      tags:
        - Pricing
      summary: Get available pricing plans
      description: Public endpoint - no authentication required
      responses:
        '200':
          description: List of pricing plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PricingPlan'
  
  /api/dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get tenant dashboard statistics
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'
        '400':
          description: No tenant associated
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch dashboard stats
  
  /api/probes:
    get:
      tags:
        - Probes
      summary: List probes for current tenant
      description: |
        SuperAdmins see all probes across tenants.
        Can also be authenticated with API key having 'probes:read' scope.
      security:
        - FirebaseAuth: []
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of probes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Probe'
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch probes
    
    post:
      tags:
        - Probes
      summary: Create a new probe
      description: Requires SuperAdmin, Owner, Admin, or Editor role
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - category
                - type
                - configuration
              properties:
                name:
                  type: string
                  maxLength: 255
                description:
                  type: string
                category:
                  type: string
                  enum: [Uptime, API, Security, Browser]
                type:
                  type: string
                  enum: [ICMP/Ping, HTTP/HTTPS, DNS Resolution, SSL/TLS, Authentication]
                configuration:
                  $ref: '#/components/schemas/ProbeConfiguration'
                checkInterval:
                  type: integer
                  default: 300
                  description: Check interval in seconds
                isActive:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Probe created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Probe'
        '400':
          description: Bad request - Invalid configuration
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to create probe
  
  /api/probes/{id}:
    put:
      tags:
        - Probes
      summary: Update an existing probe
      description: Requires SuperAdmin, Owner, Admin, or Editor role
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                  enum: [Uptime, API, Security, Browser]
                type:
                  type: string
                  enum: [ICMP/Ping, HTTP/HTTPS, DNS Resolution, SSL/TLS, Authentication]
                configuration:
                  $ref: '#/components/schemas/ProbeConfiguration'
                checkInterval:
                  type: integer
                isActive:
                  type: boolean
      responses:
        '200':
          description: Probe updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Probe'
        '400':
          description: Bad request - Invalid configuration
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Probe not found
        '500':
          description: Failed to update probe
    
    delete:
      tags:
        - Probes
      summary: Delete a probe
      description: Requires SuperAdmin, Owner, Admin, or Editor role
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Probe deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Probe not found
        '500':
          description: Failed to delete probe
  
  /api/probes/generate:
    post:
      tags:
        - Probes
      summary: AI-powered probe generation
      description: |
        Generate probe configurations using AI (Anthropic Claude).
        Requires Anthropic API key. Requires SuperAdmin, Owner, Admin, or Editor role.
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: URL to analyze
                code:
                  type: string
                  description: Code snippet to analyze
                description:
                  type: string
                  description: Description of monitoring requirements
              oneOf:
                - required: [url]
                - required: [code]
      responses:
        '200':
          description: Generated probe configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Probe'
        '400':
          description: Either URL or code must be provided
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to generate probes
  
  /api/probes/{probeId}/results:
    get:
      tags:
        - Probe Results
      summary: Get results for a specific probe
      security:
        - FirebaseAuth: []
      parameters:
        - name: probeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of probe results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProbeResult'
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch probe results
  
  /api/gateways:
    get:
      tags:
        - Gateways
      summary: List gateways
      description: |
        SuperAdmins see core gateways only.
        Tenants see core + their custom gateways.
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: List of gateways
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gateway'
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch gateways
    
    post:
      tags:
        - Gateways
      summary: Create a custom gateway
      description: Requires SuperAdmin, Owner, or Admin role
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - location
              properties:
                name:
                  type: string
                  maxLength: 255
                type:
                  type: string
                  enum: [Custom]
                  description: Non-SuperAdmins can only create Custom gateways
                location:
                  type: string
                  maxLength: 255
                ipAddress:
                  type: string
                  maxLength: 45
      responses:
        '200':
          description: Gateway created successfully (includes API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to create gateway
  
  /api/gateways/{id}:
    put:
      tags:
        - Gateways
      summary: Update a gateway
      description: |
        SuperAdmin can update any gateway.
        Others can only update their tenant's custom gateways.
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                location:
                  type: string
                ipAddress:
                  type: string
                isOnline:
                  type: boolean
      responses:
        '200':
          description: Gateway updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '401':
          description: Unauthorized
        '403':
          description: Cannot modify core gateways or insufficient permissions
        '404':
          description: Gateway not found
        '500':
          description: Failed to update gateway
    
    delete:
      tags:
        - Gateways
      summary: Delete a gateway
      description: |
        SuperAdmin can delete any gateway.
        Others can only delete their tenant's custom gateways.
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Gateway deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Cannot delete core gateways or insufficient permissions
        '404':
          description: Gateway not found
        '500':
          description: Failed to delete gateway
  
  /api/gateway/probes:
    get:
      tags:
        - Gateway API
      summary: Get probes assigned to a gateway
      description: Used by gateway applications to fetch probes to execute
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of active probes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Probe'
        '401':
          description: Invalid API key
        '500':
          description: Failed to fetch probes
  
  /api/gateway/results:
    post:
      tags:
        - Gateway API
      summary: Submit probe results from gateway
      description: Used by gateway applications to submit probe execution results
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiKey
                - results
              properties:
                apiKey:
                  type: string
                  description: Gateway API key
                results:
                  type: array
                  items:
                    type: object
                    required:
                      - probeId
                      - status
                      - resultData
                    properties:
                      probeId:
                        type: string
                        format: uuid
                      status:
                        type: string
                        enum: [Success, Failure, Warning]
                      resultData:
                        type: object
                      checkedAt:
                        type: string
                        format: date-time
      responses:
        '200':
          description: Results stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Invalid API key
        '500':
          description: Failed to store results
  
  /api/notification-groups:
    get:
      tags:
        - Notification Groups
      summary: List notification groups for tenant
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: List of notification groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationGroup'
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch notification groups
    
    post:
      tags:
        - Notification Groups
      summary: Create a notification group
      description: Requires SuperAdmin, Owner, Admin, or Editor role
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - emails
              properties:
                name:
                  type: string
                  maxLength: 255
                emails:
                  type: array
                  items:
                    type: string
                    format: email
                smsNumbers:
                  type: array
                  items:
                    type: string
                webhookUrl:
                  type: string
                  format: uri
                alertThreshold:
                  type: integer
                  default: 1
                isActive:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Notification group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationGroup'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to create notification group
  
  /api/notification-groups/{id}:
    put:
      tags:
        - Notification Groups
      summary: Update notification group
      description: Requires SuperAdmin, Owner, Admin, or Editor role
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                emails:
                  type: array
                  items:
                    type: string
                    format: email
                smsNumbers:
                  type: array
                  items:
                    type: string
                webhookUrl:
                  type: string
                  format: uri
                alertThreshold:
                  type: integer
                isActive:
                  type: boolean
      responses:
        '200':
          description: Notification group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationGroup'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Notification group not found
        '500':
          description: Failed to update notification group
    
    delete:
      tags:
        - Notification Groups
      summary: Delete notification group
      description: Requires SuperAdmin, Owner, Admin, or Editor role
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification group deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Notification group not found
        '500':
          description: Failed to delete notification group
  
  /api/alerts:
    get:
      tags:
        - Alerts
      summary: List alerts for tenant
      security:
        - FirebaseAuth: []
      parameters:
        - name: resolved
          in: query
          schema:
            type: boolean
          description: Filter by resolved status
      responses:
        '200':
          description: List of alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch alerts
  
  /api/alerts/{id}/resolve:
    put:
      tags:
        - Alerts
      summary: Resolve an alert
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Alert resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
        '401':
          description: Unauthorized
        '404':
          description: Alert not found
        '500':
          description: Failed to resolve alert
  
  /api/billing/create-subscription:
    post:
      tags:
        - Billing
      summary: Create Stripe subscription
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - plan
              properties:
                plan:
                  type: string
                  description: Plan ID (e.g., 'starter', 'professional', 'enterprise')
      responses:
        '200':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptionId:
                    type: string
                  clientSecret:
                    type: string
                    description: Stripe payment intent client secret
        '400':
          description: Invalid plan or free plan doesn't require subscription
        '401':
          description: Unauthorized
        '500':
          description: Failed to create subscription
  
  /api/billing/create-portal:
    post:
      tags:
        - Billing
      summary: Create Stripe customer portal session
      description: For managing subscriptions, payment methods, etc.
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: Portal session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
        '401':
          description: Unauthorized
        '500':
          description: Failed to create portal session
  
  /api/billing/subscription:
    get:
      tags:
        - Billing
      summary: Get current subscription details
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptionId:
                    type: string
                  status:
                    type: string
                  plan:
                    type: string
                  currentPeriodEnd:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '404':
          description: No active subscription
        '500':
          description: Failed to fetch subscription
  
  /api/api-keys:
    get:
      tags:
        - API Keys
      summary: List API keys for current user
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: List of API keys (without full key)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
                  count:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '500':
          description: Failed to list API keys
    
    post:
      tags:
        - API Keys
      summary: Create a new API key
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                scopes:
                  type: array
                  items:
                    type: string
                  description: Array of permission scopes
                expiresAt:
                  type: string
                  format: date-time
                  description: Optional expiration date
      responses:
        '201':
          description: API key created successfully (full key only shown once)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Failed to create API key
  
  /api/api-keys/{keyId}:
    patch:
      tags:
        - API Keys
      summary: Update API key
      description: Users can only modify their own keys unless SuperAdmin
      security:
        - FirebaseAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                scopes:
                  type: array
                  items:
                    type: string
                isActive:
                  type: boolean
                expiresAt:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: API key not found
        '500':
          description: Failed to update API key
    
    delete:
      tags:
        - API Keys
      summary: Delete API key
      description: Users can only delete their own keys unless SuperAdmin
      security:
        - FirebaseAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: API key deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: API key not found
        '500':
          description: Failed to delete API key
  
  /api/api-keys/scopes:
    get:
      tags:
        - API Keys
      summary: List available API key scopes
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: List of available scopes with descriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        scope:
                          type: string
                        description:
                          type: string
                  count:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch scopes
  
  /api/users/{id}:
    put:
      tags:
        - Users
      summary: Update user profile
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                company:
                  type: string
                region:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: User not found
        '500':
          description: Failed to update user
  
  /api/tenants/{id}:
    put:
      tags:
        - Tenants
      summary: Update tenant/organization settings
      description: Requires Owner or SuperAdmin role
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                subdomain:
                  type: string
      responses:
        '200':
          description: Tenant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Tenant not found
        '500':
          description: Failed to update tenant
  
  /api/collaborators:
    get:
      tags:
        - Collaborators
      summary: List team members/collaborators
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: List of collaborators
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Failed to fetch collaborators
    
    post:
      tags:
        - Collaborators
      summary: Invite a collaborator
      description: Requires Owner or Admin role
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [Admin, Editor, Helpdesk, Viewer]
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description: Collaborator invited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '500':
          description: Failed to invite collaborator
  
  /api/collaborators/{id}:
    put:
      tags:
        - Collaborators
      summary: Update collaborator role
      description: Requires Owner or Admin role
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: [Admin, Editor, Helpdesk, Viewer]
      responses:
        '200':
          description: Collaborator updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Collaborator not found
        '500':
          description: Failed to update collaborator
    
    delete:
      tags:
        - Collaborators
      summary: Remove a collaborator
      description: Requires Owner or Admin role
      security:
        - FirebaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collaborator removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions
        '404':
          description: Collaborator not found
        '500':
          description: Failed to remove collaborator
  
  /api/admin/tenants:
    get:
      tags:
        - Admin
      summary: List all tenants (SuperAdmin only)
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: List of all tenants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
        '401':
          description: Unauthorized
        '403':
          description: SuperAdmin access required
        '500':
          description: Failed to fetch tenants
  
  /api/admin/api-stats:
    get:
      tags:
        - Admin
      summary: Get API usage statistics
      description: Requires SuperAdmin role
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: API usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
        '403':
          description: SuperAdmin access required
        '500':
          description: Failed to fetch API statistics
  
  /api/admin/api-keys:
    get:
      tags:
        - Admin
      summary: List tenant API keys (Admin+ only)
      security:
        - FirebaseAuth: []
      parameters:
        - name: tenantId
          in: query
          schema:
            type: string
            format: uuid
          description: Tenant ID (SuperAdmin can specify any, others use their own)
      responses:
        '200':
          description: List of tenant API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Tenant ID is required
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '500':
          description: Failed to list tenant API keys
  
  /api/admin/api-keys/stats:
    get:
      tags:
        - Admin
      summary: Get API key statistics (Admin+ only)
      security:
        - FirebaseAuth: []
      parameters:
        - name: tenantId
          in: query
          schema:
            type: string
            format: uuid
          description: Tenant ID (SuperAdmin can specify any, others use their own)
      responses:
        '200':
          description: API key statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Tenant ID is required
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '500':
          description: Failed to fetch API key statistics
  
  /api/admin/logs/stats:
    get:
      tags:
        - Admin
      summary: Get logging system statistics
      description: Requires Admin, Owner, or SuperAdmin role
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: Log file statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      totalSize:
                        type: integer
                        description: Total size in bytes
                      fileCount:
                        type: integer
                      currentFile:
                        type: string
                      files:
                        type: array
                        items:
                          type: object
                          properties:
                            path:
                              type: string
                            name:
                              type: string
                      maxTotalSizeMB:
                        type: number
                      maxFileSizeMB:
                        type: number
                      logDirectory:
                        type: string
                  timestamp:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '500':
          description: Failed to fetch log statistics
  
  /api/admin/notifications/send:
    post:
      tags:
        - Admin
      summary: Send test notification (Admin+ only)
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - recipient
                - message
              properties:
                type:
                  type: string
                  enum: [email, sms, webhook]
                recipient:
                  type: string
                  description: Email address, phone number, or webhook URL
                subject:
                  type: string
                  maxLength: 200
                message:
                  type: string
                  maxLength: 1000
                priority:
                  type: string
                  enum: [low, medium, high, critical]
                  default: medium
      responses:
        '200':
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '500':
          description: Failed to send notification
  
  /api/admin/notifications/stats:
    get:
      tags:
        - Admin
      summary: Get notification statistics (Admin+ only)
      security:
        - FirebaseAuth: []
      responses:
        '200':
          description: Notification statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '500':
          description: Failed to fetch notification statistics
  
  /api/admin/notifications/logs:
    get:
      tags:
        - Admin
      summary: Get notification logs (Admin+ only)
      security:
        - FirebaseAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [email, sms, webhook]
        - name: status
          in: query
          schema:
            type: string
        - name: since
          in: query
          schema:
            type: integer
            description: Timestamp (milliseconds since epoch)
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
            maximum: 1000
      responses:
        '200':
          description: Notification logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                  timestamp:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '500':
          description: Failed to fetch notification logs
  
  /api/notifications/send-to-group:
    post:
      tags:
        - Notification Groups
      summary: Send notification to group (Admin+ only)
      description: Used internally by alert system
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
                - message
              properties:
                groupId:
                  type: string
                  format: uuid
                subject:
                  type: string
                message:
                  type: string
                priority:
                  type: string
                  enum: [low, medium, high, critical]
                  default: medium
                probeId:
                  type: string
                  format: uuid
                alertId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Notifications sent to group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized
        '403':
          description: Access denied to notification group
        '404':
          description: Notification group not found
        '500':
          description: Failed to send notifications to group
